{
	// Event types are:
	//     STATE_IND = State indication: Generated by the item owner link to inform other links about the item value. There is
	//                 no distinction between the ones generated by the owner because of a value change (unsolicited STATE_IND) 
	//                 and those triggered by a READ_REQ event (solicited STATE_IND). 
	//     WRITE_REQ = Write request: Generated by other links to ask the item owner link to assign a new value to the item.
	//     READ_REQ = Read request: Generated by other links to ask the item owner link to generate a STATE_IND event for the item.

	// Enables logging of received and distributed events. Optional, default is false. 
	"logEvents": true,

	// Only evaluated in case the parameter logEvents is set to true. It indicates whether suppressed STATE_IND events (no
	// significant value change compared to former STATE_IND) will be logged or not. Optional, default is false.
	//"logSuppressedEvents": true,

	// Only evaluated in case the parameter logEvents is set to true. It indicates whether generated READ_REQ events (polling)
	// will be logged or not. Optional, default is false.
	//"logGeneratedEvents": false,

	// Defines the name of the file to which the log messages are written. In case no name is given or in case
	// an empty name is given the log message are only witten to standard out (stdout). Optional, default is empty.
	//"logFileName": "/weaver/log/weaver.log",
	//"logFileName": "/home/peter/weaver/weaver.log",

	// Defines the maximum size of the log file in bytes. When the log file becomes bigger it is renamed (for backup) 
	// and a new empty one is created. If 0 is given the size of the log file is not limited and log file backups are 
	// not performed. Optional, default is 0. 
	"maxLogFileSize": 10000000,

	// Defines the maximum number of log file backups. When the number of files becomes larger the oldest file will be deleted. 
	// If 0 is given log file backups are not performed. Optional, default is 0. 
	"maxLogFileCount": 3,

	// List of all items for which events (STATE_IND, WRITE_REQ, READ_REQ) can potentially be received or sent.
	"items": [
		// Definition of an item.
		//{
			// Unique identifier of item.
			//"id": "Strom_Zaehlerstand", 

			// Values assigned to the item should have this data type. Possible value types are void, boolean, number 
			// and string. The value range of the data type number covers integer and floating point numbers. READ_REQ
			// for items of type void are not allowed. 
			//"type": "number",

			// Link which manages the item. That is, the link from which STATE_IND events are recieved and 
			// to which READ_REQ and WRITE_REQ are passed. 
			//"ownerId": "stromzaehler", 

			// Indicates whether the item can be queried by means of READ_REQ to the owner link. This property is 
			// automatically reduced to the link capabilities. That is, even if the item is declared as readable it 
			// becomes non-readable if the link does not provide this feature. Optional, default is true.
			//"readable": true,

			// Indicates whether the item can be modified by means of WRITE_REQ to the owner link. This property is 
			// automatically reduced to the link capabilities. That is, even if the item is declared as writable it 
			// becomes non-writable if the link does not provide this feature. Optional, default is true.
			//"writable": true,

			// STATE_IND events generated by the owner link can be suppressed in case the new values do not differ 
			// significantly from the former stored and published one. Only in case the values are outside a tolerance 
			// they are stored and distributed to other links. The tolerance is defined by means of the fields absVariation 
			// and relVariation. STATE_IND suppression only takes place for values within the range defined by the fields 
			// minimum and maximum.
			//"sendOnChange":
			//{
				// Defines the tolerance between stored and received value as an absolute figure. 
				// Optional, default is 0.0.
				//"absVariation": 1.0,

				// Defines the tolerance between stored and received value as a relative figure in 
				// percent (0-100). Optional, default is 0.0.
				//"relVariation": 10.0,

				// Lower bound of range. Optional, default is a very small negative number.
				//"minimum": -100.0,

				// Upper bound of range. Optional, default is a very large positive number.
				//"minimum": 100.0,
			//}

			// STATE_IND events can be generated automatically after a timespan without activity. The time interval 
			// after which a STATE_IND will be produced at latest is parametrized via the field duration. 
			//"sendOnTimer":
			//{
				// Time interval in seconds. Optional, default is 300.
				//duration: 300
			//}
		//},

		{ "id": "Telefonanruf_Eingehend", "type": "string", "ownerId": "fritzbox_callmonitor", "writable": false }, // Nummer des Anrufenden
		{ "id": "Telefonanruf_Ausgehend", "type": "string", "ownerId": "fritzbox_callmonitor", "writable": false }, // Nummer des Gerufenen
		{ "id": "Telefonanruf_Beginnt", "type": "boolean", "ownerId": "fritzbox_callmonitor", "writable": false },
		{ "id": "Telefonanruf_Endet", "type": "boolean", "ownerId": "fritzbox_callmonitor", "writable": false },

		{ "id": "Haustuerklingel", "type": "void", "ownerId": "sonos_api", "readable": false },

		{ "id": "FSE_EG_Bad_Durchsage", "type": "void", "ownerId": "sonos_api", "readable": false },
		{ "id": "FSE_WC_Durchsage", "type": "void", "ownerId": "sonos_api", "readable": false },
		{ "id": "FSE_Meike_Durchsage", "type": "void", "ownerId": "sonos_api", "readable": false },
		{ "id": "FSE_Merle_Durchsage", "type": "void", "ownerId": "sonos_api", "readable": false },
		{ "id": "FSE_Eltern_Durchsage", "type": "void", "ownerId": "sonos_api", "readable": false },

		{ "id": "BP_Aral", "type": "number", "ownerId": "tankerkönig", "writable": false, "pollInterval": 600 },
		{ "id": "BP_Esso", "type": "number", "ownerId": "tankerkönig", "writable": false, "pollInterval": 600 },

		{ "id": "Handy_Peter", "type": "boolean", "ownerId": "fritzbox_tr064", "writable": false, "pollInterval": 10, "sendOnChange": {}, "sendOnTimer": {} },
		{ "id": "Handy_Beate", "type": "boolean", "ownerId": "fritzbox_tr064", "writable": false, "pollInterval": 10, "sendOnChange": {}, "sendOnTimer": {} },
		{ "id": "Handy_Meike", "type": "boolean", "ownerId": "fritzbox_tr064", "writable": false, "pollInterval": 10, "sendOnChange": {}, "sendOnTimer": {} },
		{ "id": "Handy_Merle", "type": "boolean", "ownerId": "fritzbox_tr064", "writable": false, "pollInterval": 10, "sendOnChange": {}, "sendOnTimer": {} },

		{ "id": "Fernseher_Wohnen_2", "type": "boolean", "ownerId": "fritzbox_tr064", "writable": false, "pollInterval": 10, "sendOnChange": {}, "sendOnTimer": {} },
		{ "id": "Fernseher_Hobbyraum_2", "type": "boolean", "ownerId": "fritzbox_tr064", "writable": false, "pollInterval": 10, "sendOnChange": {}, "sendOnTimer": {} },

		{ "id": "Strom_Zaehlerstand", "type": "number", "ownerId": "stromzaehler", "sendOnChange": { "absVariation": 1 }, "sendOnTimer": {} },
		{ "id": "Stromverbrauch_Aktuell_Gesamt", "type": "number", "ownerId": "stromzaehler", "sendOnChange": { "relVariation": 5 }, "sendOnTimer": {} },
		{ "id": "Stromverbrauch_Aktuell_Phase1", "type": "number", "ownerId": "stromzaehler", "sendOnChange": { "relVariation": 5 }, "sendOnTimer": {} },
		{ "id": "Stromverbrauch_Aktuell_Phase2", "type": "number", "ownerId": "stromzaehler", "sendOnChange": { "relVariation": 5 }, "sendOnTimer": {} },
		{ "id": "Stromverbrauch_Aktuell_Phase3", "type": "number", "ownerId": "stromzaehler", "sendOnChange": { "relVariation": 5 }, "sendOnTimer": {} },

		{ "id": "Helligkeit_Aussen_Ost", "type": "number", "ownerId": "wetterstation", "sendOnChange": { "absVariation": 1, "minimum": 5 }, "sendOnTimer": {} },
		{ "id": "Helligkeit_Aussen_Sued", "type": "number", "ownerId": "wetterstation", "sendOnChange": { "absVariation": 1, "minimum": 5 }, "sendOnTimer": {} },
		{ "id": "Helligkeit_Aussen_West", "type": "number", "ownerId": "wetterstation", "sendOnChange": { "absVariation": 1, "minimum": 5 }, "sendOnTimer": {} },
		{ "id": "Helligkeit_Aussen_Daemmerung", "type": "number", "ownerId": "wetterstation", "sendOnChange": {}, "sendOnTimer": {} },
		{ "id": "Windgeschwindigkeit", "type": "number", "ownerId": "wetterstation", "sendOnChange": { "absVariation": 1 }, "sendOnTimer": {} },
		{ "id": "Regen", "type": "boolean", "ownerId": "wetterstation", "sendOnChange": {}, "sendOnTimer": {} },
		{ "id": "Temperatur_Aussen", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "Windalarm", "type": "boolean", "ownerId": "storage", "sendOnTimer": {} },
		{ "id": "Regenalarm", "type": "boolean", "ownerId": "storage", "sendOnTimer": {} },

		{ "id": "Puffer_SP1_Temperatur", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "Puffer_SP2_Temperatur", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "Puffer_TD2_Temperatur", "type": "number", "ownerId": "ebusd", "writable": false },

		{ "id": "FBH_Modus", "type": "number", "ownerId": "ebusd" },
		{ "id": "FBH_Raum_Solltemperatur", "type": "number", "ownerId": "ebusd" },
		{ "id": "FBH_Absenktemperatur", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "FBH_Heizkurve", "type": "number", "ownerId": "ebusd" },
		{ "id": "FBH_Abschalttemperatur", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "FBH_Vorlauf_Solltemperatur", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "FBH_Vorlauf_Isttemperatur", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "FBH_Vorlauf_Puffertemperatur", "type": "number", "ownerId": "ebusd", "writable": false },

		{ "id": "WW_Modus", "type": "number", "ownerId": "ebusd" },
		{ "id": "WW_ZK_Solltemperatur", "type": "number", "ownerId": "ebusd" },
		{ "id": "WW_ZK_Volumenstrom", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "WW_ZK_Vorlauftemperatur", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "WW_PK_Vorlauftemperatur", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "WW_PK_Ruecklauftemperatur", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "WW_PK_Mischerstatus", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "Zirkulationspumpe", "type": "boolean", "ownerId": "timberwolf" },
		{ "id": "WW_Thermenlauf", "type": "boolean", "ownerId": "timberwolf", "writable": false },
		{ "id": "WW_ZPA_Pumpenlauf_Starten", "type": "void", "ownerId": "storage" },
		{ "id": "WW_ZPA_Pumpenlauf_Notwendig", "type": "boolean", "ownerId": "storage" },
		{ "id": "WW_ZPA_Pumpenlauf_Unnoetig", "type": "boolean", "ownerId": "storage" },

		{ "id": "ST_Tagesertrag", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "ST_Gesamtertrag", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "ST_KK_Vorlauftemperatur", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "ST_KK_Ruecklauftemperatur", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "ST_KK_Pumpenleistung", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "ST_KK_Pumpenlaufzeit", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "ST_PK_Vorlauftemperatur", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "ST_PK_Ruecklauftemperatur", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "ST_PK_Pumpenleistung", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "ST_PK_Pumpenlaufzeit", "type": "number", "ownerId": "ebusd", "writable": false },
		{ "id": "ST_PK_Volumenstrom", "type": "number", "ownerId": "ebusd", "writable": false },

		{ "id": "EMA_Aktiv", "type": "boolean", "ownerId": "storage", "sendOnTimer": {} },
		{ "id": "EMA_Voralarm_Dauer", "type": "number", "ownerId": "storage", "sendOnTimer": {} }, // seconds
		{ "id": "EMA_Voralarm", "type": "boolean", "ownerId": "storage", "sendOnTimer": {} },
		{ "id": "EMA_Scharf", "type": "boolean", "ownerId": "storage", "sendOnTimer": {} },

		{ "id": "EFA_Bad_Offen", "type": "boolean", "ownerId": "storage", "sendOnTimer": {} },
		{ "id": "EFA_Flur_Offen", "type": "boolean", "ownerId": "storage", "sendOnTimer": {} },

		{ "id": "Alarm", "type": "boolean", "ownerId": "storage", "sendOnTimer": {} },
		{ "id": "Abschreckmodus", "type": "boolean", "ownerId": "storage", "sendOnTimer": {} },

		{ "id": "Herzschlag_ebusd", "type": "void", "ownerId": "ebusd", "readable": false, "writable": false },
		{ "id": "Herzschlag_weaver", "type": "void", "ownerId": "generator", "readable": false, "writable": false },
	],

	// Interfaces to other systems and/or devices.
	"links": [
		{
			// Identifier for this link.
			"id": "stromzaehler",

			// If present values for boolean items are transmitted over the link as string and an 
			// automatic conversion is performed. Optional, default is no conversion.
			//"booleanAsString": { "falseValue": "no", "trueValue": "yes" },

			// If present values for number items are transmitted over the link as string and an 
			// automatic conversion is performed. Optional, default is no conversion.
			"numberAsString": {},

			// If present values for void items are transmitted over the link as string and an 
			// automatic conversion is performed. Optional, default is no conversion.
			//"voidAsString": { "value": "void" },

			// Alteration rules for events and their values which are transmitted over the link.
			"modifiers" : [ 
				// Definition of a modifier.
				//{
					// The manipulation is restricted to events belonging to this item.
					//"itemId": "helligkeit",

					// Received number values are multiplied with the given factor and values which are going 
					// to be sent are divided by it.
					//"factor": 1000,
				//},
			],

			// Link type specific parametrization.
			"port":	{
				// Name of serial device/port. For example /dev/ttyUSB0.
				"name": "/dev/smartmeter",

				// Speed as baud/bit rate. Possible values are 1200, 1800, 2400, 4800, 9600, 19200, 38400, 
				// 57600 or 115200.
				"baudRate": 9600,

				// Number of data bits per character. Possible values are 5, 6, 7 or 8.
				"dataBits": 7,

				// Number of stop bits per character. Possible values are 1 or 2.
				"stopBits": 1,

				// Parity. Possible values are even, odd or none.
				"parity": "even",

				// Within this time period (given in seconds) there must be at least one byte received. Othrwise 
				// the serial device/port is automatically closed. Optional, default is 60. 
				//"timeoutInterval": 60,

				// Delay in seconds between attempts to reopen the serial device/port when access errors have 
				// been encountered. Optional, default is 60. 
				//"reopenInterval": 60,

				// Regular expression (POSIX extended) for splitting the received byte stream into messages. For 
				// parsing and evaluation of the expression std::regex is used internally. Potential marked 
				// subexpressions are ignored.
				"msgPattern": "/.*!\r\n",

				// Enables logging of the received byte stream. Optional, default is false.
				//"logRawData": true,

				// Indicates whether the received byte stream has to be logged in hexadecimal representation.
				// Optional, default is false.
				//"logRawDataInHex": true,

				// Mapping of received message to one or more items.
				"bindings": [
					{ "itemId": "Strom_Zaehlerstand", "pattern": ".*1-0:1\\.8\\.0\\*255\\(([0-9]{8}\\.[0-9]{7}).*" }, // nnnnnnnn.nnnnnnn, kWh
					{ "itemId": "Stromverbrauch_Aktuell_Phase1", "pattern": ".*1-0:21\\.7\\.255\\*255\\(([0-9]{6}\\.[0-9]{2}).*" }, // nnnnnn.nn, Watt
					{ "itemId": "Stromverbrauch_Aktuell_Phase2", "pattern": ".*1-0:41\\.7\\.255\\*255\\(([0-9]{6}\\.[0-9]{2}).*" }, // nnnnnn.nn, Watt
					{ "itemId": "Stromverbrauch_Aktuell_Phase3", "pattern": ".*1-0:61\\.7\\.255\\*255\\(([0-9]{6}\\.[0-9]{2}).*" }, // nnnnnn.nn, Watt
					{ "itemId": "Stromverbrauch_Aktuell_Gesamt", "pattern": ".*1-0:1\\.7\\.255\\*255\\(([0-9]{6}\\.[0-9]{2}).*" } // nnnnnn.nn, Watt
				]
			}
		},

		{
			"id": "wetterstation", 
			"numberAsString": {},
			"booleanAsString": { "falseValue": "0", "trueValue": "1" },
			"modifiers" : [ 
				//{ "itemId": "Helligkeit_Aussen_Ost", "factor": 1000 },
				//{ "itemId": "Helligkeit_Aussen_Sued", "factor": 1000 },
				//{ "itemId": "Helligkeit_Aussen_West", "factor": 1000 }
			],

			"port":	{
				"name": "/dev/weatherstation",
				"baudRate": 9600,
				"dataBits": 8,
				"stopBits": 1,
				"parity": "none",
				//"msgPattern": "\\x02.*\\x03\r\n",
				//"msgPattern": "[[.STX.]].*[[.ETX.]]\r\n",
				"msgPattern": "[[:cntrl:]].{62}*[[:cntrl:]]\r\n",
				//"logRawData": true,
				//"logRawDataInHex": true,
				"bindings": [
					{ "itemId": "Helligkeit_Aussen_Ost", "pattern": ".{19}([0-9]{3}\\.[0-9]).*" }, // Format nnn.n, 0...150 kLux
					{ "itemId": "Helligkeit_Aussen_Sued", "pattern": ".{25}([0-9]{3}\\.[0-9]).*" }, // Format nnn.n, 0...150 kLux
					{ "itemId": "Helligkeit_Aussen_West", "pattern": ".{31}([0-9]{3}\\.[0-9]).*" }, // Format nnn.n, 0...150 kLux
					{ "itemId": "Helligkeit_Aussen_Daemmerung", "pattern": ".{37}([0-9]{3}).*" }, // Format nnn, 0...250 Lux, !!! wenn >250 Lux
					{ "itemId": "Windgeschwindigkeit", "pattern": ".{53}([0-9]{2}\\.[0-9]).*" }, // Format nn.n, 0..40 m/s,
					{ "itemId": "Regen", "pattern": ".{51}([0-1]).*" } // 0/1
				]
			}
		},

		{
			"id": "timberwolf",

			// Link type specific parametrization.
			"knx": {
				// IP address passed to the KNX/IP gateway and used by it to contact weaver. 
				// It is ignored and not delivered in case the NAT mode is enabled. 
				"localIpAddr": "192.168.25.10",
			
				// Usage of network address translation (NAT mode) for accessing the KNX/IP gateway.
				// This mode is usually needed when the gateway is located on another network behind 
				// a router. Optional, default is false.
				"natMode": true,
			
				// IP address of KNX/IP gateway.
				"ipAddr": "192.168.25.9",
			
				// IP port on which KNX/IP gateway accepts tunnel requests. Optional, default is 3671.
				"ipPort": 3674,

				// Delay in seconds between reconnect attempts to the KNX/IP gateway when the link has been 
				// lost. Optional, default is 60. 
				//"reconnectInterval": 60,

				// Delay in seconds between successive sending of CONNECTION STATE REQUEST messages.
				// Optional, default is 60. 
				//"connStateReqInterval": 60,

				// Timeout in seconds when waiting for the response to a CONNECTION REQUEST or 
				// CONNECTION STATE REQUEST on the control connection. Optional, default is 10.
				//"controlRespTimeout": 10,

				// Timeout in seconds when waiting for the corresponding TUNNEL ACK to a TUNNEL REQUEST on
				// the data connection. Optional, default is 1. 
				//"tunnelAckTimeout": 1,

				// Timeout in seconds when waiting for the corresponding L_Data.con to a L_Data.req on
				// the data connection. Optional, default is 3. 
				//"ldataConTimeout": 3,

				// Physical address used when accessing the KNX bus. Optional, default is 0.0.0.
				"physicalAddr": "1.1.255",

				// Enables logging of all received and sent UDP messages in hexadecimal format. 
				// Optional, default is false. 
				//"logRawMessages": true,

				// Enables logging of all received and sent payloads (cEMI frames) including message code, 
				// group address and physical address. Optional, default is false. 
				//"logData": true,

				// Mapping from KNX to items and vice versa.
				"bindings":	[
					{ "itemId": "Haustuerklingel", "writeGa": "3/3/15", "dpt": "1.001" },

					{ "itemId": "Handy_Peter", "stateGa": "5/0/30", "dpt": "1.001" },
					{ "itemId": "Handy_Beate", "stateGa": "5/0/31", "dpt": "1.001" },
					{ "itemId": "Handy_Meike", "stateGa": "5/0/32", "dpt": "1.001" },
					{ "itemId": "Handy_Merle", "stateGa": "5/0/33", "dpt": "1.001" },

					{ "itemId": "Strom_Zaehlerstand", "stateGa": "3/4/10", "dpt": "13.013" },
					{ "itemId": "Stromverbrauch_Aktuell_Phase1", "stateGa": "3/4/11", "dpt": "14.056" },
					{ "itemId": "Stromverbrauch_Aktuell_Phase2", "stateGa": "3/4/12", "dpt": "14.056" },
					{ "itemId": "Stromverbrauch_Aktuell_Phase3", "stateGa": "3/4/13", "dpt": "14.056" },
					{ "itemId": "Stromverbrauch_Aktuell_Gesamt", "stateGa": "3/4/14", "dpt": "14.056" },

					{ "itemId": "Helligkeit_Aussen_Ost", "stateGa": "5/5/80", "dpt": "9.004" },
					{ "itemId": "Helligkeit_Aussen_Sued", "stateGa": "5/5/81", "dpt": "9.004" },
					{ "itemId": "Helligkeit_Aussen_West", "stateGa": "5/5/82", "dpt": "9.004" },
					{ "itemId": "Helligkeit_Aussen_Daemmerung", "stateGa": "5/5/83", "dpt": "9.004" },
					{ "itemId": "Windgeschwindigkeit", "stateGa": "5/0/10", "dpt": "9.005" },
					{ "itemId": "Regen", "stateGa": "5/0/20", "dpt": "1.001" },
					{ "itemId": "Temperatur_Aussen", "stateGa": "3/6/18", "dpt": "9.001" },
					{ "itemId": "Windalarm", "stateGa": "3/1/4", "writeGa": "3/1/4", "dpt": "1.001" },
					{ "itemId": "Regenalarm", "stateGa": "3/1/3", "writeGa": "3/1/3", "dpt": "1.001" },

					{ "itemId": "Puffer_SP1_Temperatur", "stateGa": "3/6/10", "dpt": "9.001" },
					{ "itemId": "Puffer_SP2_Temperatur", "stateGa": "3/6/11", "dpt": "9.001" },
					{ "itemId": "Puffer_TD2_Temperatur", "stateGa": "3/6/12", "dpt": "9.001" },

					{ "itemId": "FBH_Modus", "stateGa": "3/6/23", "writeGa": "3/6/33", "dpt": "5.010" },
					{ "itemId": "FBH_Raum_Solltemperatur", "stateGa": "3/6/25", "writeGa": "3/6/35", "dpt": "9.001" },
					{ "itemId": "FBH_Absenktemperatur", "stateGa": "3/6/27", "dpt": "9.001" },
					{ "itemId": "FBH_Heizkurve", "stateGa": "3/6/24", "writeGa": "3/6/34", "dpt": "9.001" },
					{ "itemId": "FBH_Abschalttemperatur", "stateGa": "3/6/26", "dpt": "9.001" },
					{ "itemId": "FBH_Vorlauf_Solltemperatur", "stateGa": "3/6/20", "dpt": "9.001" },
					{ "itemId": "FBH_Vorlauf_Isttemperatur", "stateGa": "3/6/22", "dpt": "9.001" },
					{ "itemId": "FBH_Vorlauf_Puffertemperatur", "stateGa": "3/6/21", "dpt": "9.001" },

					{ "itemId": "WW_Modus", "stateGa": "3/6/40", "writeGa": "3/6/50", "dpt": "5.010" },
					{ "itemId": "WW_ZK_Solltemperatur", "stateGa": "3/6/41", "writeGa": "3/6/51", "dpt": "9.001" },
					{ "itemId": "WW_ZK_Vorlauftemperatur", "stateGa": "3/6/45", "dpt": "9.001" },
					{ "itemId": "WW_ZK_Volumenstrom", "stateGa": "3/6/42", "dpt": "9.025" },
					{ "itemId": "WW_PK_Vorlauftemperatur", "stateGa": "3/6/44", "dpt": "9.001" },
					{ "itemId": "WW_PK_Ruecklauftemperatur", "stateGa": "3/6/46", "dpt": "9.001" },
					{ "itemId": "WW_PK_Mischerstatus", "stateGa": "3/6/47", "dpt": "5.010" },
					{ "itemId": "Zirkulationspumpe", "stateGa": "3/6/5", "writeGa": "3/6/4", "dpt": "1.001" },
					{ "itemId": "WW_Thermenlauf", "stateGa": "3/6/1", "dpt": "1.001" },
					{ "itemId": "WW_ZPA_Pumpenlauf_Starten", "writeGa": "3/6/6", "dpt": "1.001" },
					{ "itemId": "WW_ZPA_Pumpenlauf_Notwendig", "stateGa": "3/6/7", "dpt": "1.001" },

					{ "itemId": "ST_Tagesertrag", "stateGa": "3/6/60", "dpt": "13.013" },
					{ "itemId": "ST_Gesamtertrag", "stateGa": "3/6/70", "dpt": "13.013" },
					{ "itemId": "ST_KK_Vorlauftemperatur", "stateGa": "3/6/61", "dpt": "9.001" },
					{ "itemId": "ST_KK_Ruecklauftemperatur", "stateGa": "3/6/62", "dpt": "9.001" },
					{ "itemId": "ST_KK_Pumpenleistung", "stateGa": "3/6/63", "dpt": "5.001" },
					{ "itemId": "ST_KK_Pumpenlaufzeit", "stateGa": "3/6/64", "dpt": "7.007" },
					{ "itemId": "ST_PK_Vorlauftemperatur", "stateGa": "3/6/65", "dpt": "9.001" },
					{ "itemId": "ST_PK_Ruecklauftemperatur", "stateGa": "3/6/66", "dpt": "9.001" },
					{ "itemId": "ST_PK_Pumpenleistung", "stateGa": "3/6/67", "dpt": "5.001" },
					{ "itemId": "ST_PK_Pumpenlaufzeit", "stateGa": "3/6/68", "dpt": "7.007" },
					{ "itemId": "ST_PK_Volumenstrom", "stateGa": "3/6/69", "dpt": "9.025" },

					{ "itemId": "EMA_Aktiv", "stateGa": "3/2/41", "writeGa": "3/2/40", "dpt": "1.001" },
					{ "itemId": "EMA_Voralarm", "stateGa": "3/2/43", "writeGa": "3/2/42", "dpt": "1.001" },
					{ "itemId": "EMA_Voralarm_Dauer", "stateGa": "3/2/45", "writeGa": "3/2/44", "dpt": "7.005" },
					{ "itemId": "EMA_Scharf", "stateGa": "3/2/47", "writeGa": "3/2/46", "dpt": "1.001" },

					{ "itemId": "EFA_Bad_Offen", "stateGa": "8/1/1", "dpt": "1.001" },
					{ "itemId": "EFA_Flur_Offen", "stateGa": "8/1/8", "dpt": "1.001" },

					{ "itemId": "Alarm", "stateGa": "3/2/10", "writeGa": "3/2/10", "dpt": "1.001" },
					{ "itemId": "Abschreckmodus", "stateGa": "3/2/30", "writeGa": "3/2/30", "dpt": "1.001" },

					{ "itemId": "FSE_EG_Bad_Durchsage", "writeGa": "7/1/12", "dpt": "1.001" },
					{ "itemId": "FSE_WC_Durchsage", "writeGa": "7/1/22", "dpt": "1.001" },
					{ "itemId": "FSE_Meike_Durchsage", "writeGa": "7/1/32", "dpt": "1.001" },
					{ "itemId": "FSE_Merle_Durchsage", "writeGa": "7/1/42", "dpt": "1.001" },
					{ "itemId": "FSE_Eltern_Durchsage", "writeGa": "7/1/52", "dpt": "1.001" },
				]
			}
		},

		{
			"id": "ebusd",
			"numberAsString": {},
			"voidAsString": { "value": "true" },

			// Link type specific parametrization.
			"mqtt":	{
				// Prefix of client id passed to MQTT broker when connecting. It is expanded with "." and 
				// the process id. Optional, default is "weaver".
				"clientIdPrefix": "weaver_ebusd",

				// Hostname or IP address of the MQTT broker.
				"hostname": "192.168.25.9",

				// IP port on which MQTT broker is listening. Optional, default is 1883.
				//"port": 1883,

				// Delay in seconds between reconnect attempts to the MQTT broker when link has been lost.
				// Optional, default is 60. 
				//"reconnectInterval": 60,

				// Retain flag for STATE_IND induced messages. Optional, default is false.
				"retainFlag": true,

				// Enables logging of all received and sent messages (payload and topic). 
				// Optional, default is false. 
				//"logMessages": true,

				// Topics to which weaver subsribes but without necessarily associating the received messages 
				// with any item. This can be useful for debugging purpose in conjunction with the logMessages flag. 
				// Optional, default is no topic. 
				//"subTopics": [ "ebus/#" ],

				// STATE_IND events for items which are not explicitly bound are sent on the topic 
				// derived from this pattern if defined. Optional, default is no topic pattern. 
				//"stateTopicPattern": "%ItemId%/state",

				// WRITE_REQ events for items which are not explicitly bound are received on the topic 
				// derived from this pattern if defined. Optional, default is no topic pattern. 
				//"writeTopicPattern": "%ItemId%/write",

				// READ_REQ events for items which are not explicitly bound are received on the topic 
				// derived from this pattern if defined. Optional, default is no topic pattern. 
				//"readTopicPattern": "%ItemId%/read",

				// Mapping from MQTT to items and vice versa.
				"bindings":	[
					{ "itemId": "Temperatur_Aussen", "stateTopic": "ebus/aussen_temp/wert", "readTopic": "ebus/aussen_temp/wert/get" },

					{ "itemId": "Puffer_SP1_Temperatur", "stateTopic": "ebus/puffer_sp1/temp", "readTopic": "ebus/puffer_sp1/temp/get" },
					{ "itemId": "Puffer_SP2_Temperatur", "stateTopic": "ebus/puffer_sp2/temp", "readTopic": "ebus/puffer_sp2/temp/get" },
					{ "itemId": "Puffer_TD2_Temperatur", "stateTopic": "ebus/puffer_td2/temp", "readTopic": "ebus/puffer_td2/temp/get" },

					{ 
						"itemId": "FBH_Modus",
						"stateTopics": [ "ebus/fbh_raum_temp_modus/modus", "ebus/fbh_modus/wert" ],
						"readTopic": "ebus/fbh_raum_temp_modus/modus/get",
						"writeTopic": "ebus/fbh_modus/wert/set"
					},
					{
						"itemId": "FBH_Raum_Solltemperatur",
						"stateTopics": [ "ebus/fbh_raum_temp_modus/temp", "ebus/fbh_raum_temp/wert" ],
						"readTopic": "ebus/fbh_raum_temp_modus/temp/get",
						"writeTopic": "ebus/fbh_raum_temp/wert/set"
					},
					{ "itemId": "FBH_Absenktemperatur",			"stateTopic": "ebus/fbh_absenk_temp/wert",		"readTopic": "ebus/fbh_absenk_temp/wert/get" },
					{ "itemId": "FBH_Heizkurve",				"stateTopic": "ebus/fbh_heizkurve/wert", 		"readTopic": "ebus/fbh_heizkurve/wert/get",			"writeTopic": "ebus/fbh_heizkurve/wert/set" },
					{ "itemId": "FBH_Abschalttemperatur",		"stateTopic": "ebus/fbh_abschalt_temp/wert", 	"readTopic": "ebus/fbh_abschalt_temp/wert/get" },
					{ "itemId": "FBH_Vorlauf_Solltemperatur",	"stateTopic": "ebus/fbh_vorlauf_soll_temp/wert","readTopic": "ebus/fbh_vorlauf_soll_temp/wert/get" },
					{ "itemId": "FBH_Vorlauf_Isttemperatur", 	"stateTopic": "ebus/fbh_vf2/temp", 				"readTopic": "ebus/fbh_vf2/temp/get" },
					{ "itemId": "FBH_Vorlauf_Puffertemperatur",	"stateTopic": "ebus/fbh_vf1/temp", 				"readTopic": "ebus/fbh_vf1/temp/get" },

					{
						"itemId": "WW_Modus",
						"stateTopics": [ "ebus/ww_soll_temp_modus/modus", "ebus/ww_modus/wert" ],
						"readTopic": "ebus/ww_soll_temp_modus/modus/get",
						"writeTopic": "ebus/ww_modus/wert/set"
					},
					{
						"itemId": "WW_ZK_Solltemperatur",
						"stateTopics": [ "ebus/ww_soll_temp_modus/temp", "ebus/ww_soll_temp/wert" ],
						"readTopic": "ebus/ww_soll_temp_modus/temp/get",
						"writeTopic": "ebus/ww_soll_temp/wert/set"
					},
					{ "itemId": "WW_ZK_Volumenstrom", 			"stateTopic": "ebus/ww_zk_volumenstrom/wert",	"readTopic": "ebus/ww_zk_volumenstrom/wert/get" },
					{ "itemId": "WW_ZK_Vorlauftemperatur", 		"stateTopic": "ebus/ww_ntc3/temp", 				"readTopic": "ebus/ww_ntc3/temp/get" },
					{ "itemId": "WW_PK_Vorlauftemperatur", 		"stateTopic": "ebus/ww_ntc1/temp", 				"readTopic": "ebus/ww_ntc1/temp/get" },
					{ "itemId": "WW_PK_Ruecklauftemperatur", 	"stateTopic": "ebus/ww_ntc2/temp", 				"readTopic": "ebus/ww_ntc2/temp/get" },
					{ "itemId": "WW_PK_Mischerstatus", 			"stateTopic": "ebus/ww_pk_mischer_status/wert",	"readTopic": "ebus/ww_pk_mischer_status/wert/get" },

					{ "itemId": "ST_Tagesertrag", 				"stateTopic": "ebus/st_tagesertrag/wert",		"readTopic": "ebus/st_tagesertrag/wert/get" },
					{ "itemId": "ST_Gesamtertrag", 				"stateTopic": "ebus/st_gesamtertrag/wert",		"readTopic": "ebus/st_gesamtertrag/wert/get" },
					{ "itemId": "ST_KK_Vorlauftemperatur", 		"stateTopic": "ebus/st_kk_vorlauf/temp", 		"readTopic": "ebus/st_kk_vorlauf/temp/get" },
					{ "itemId": "ST_KK_Ruecklauftemperatur",	"stateTopic": "ebus/st_kk_ruecklauf/temp", 		"readTopic": "ebus/st_kk_ruecklauf/temp/get" },
					{ "itemId": "ST_KK_Pumpenleistung",			"stateTopic": "ebus/st_kk_pumpe_status/wert", 	"readTopic": "ebus/st_kk_pumpe_status/wert/get" },
					{ "itemId": "ST_KK_Pumpenlaufzeit",			"stateTopic": "ebus/st_kk_pumpe_laufzeit/wert",	"readTopic": "ebus/st_kk_pumpe_laufzeit/wert/get" },
					{ "itemId": "ST_PK_Vorlauftemperatur", 		"stateTopic": "ebus/st_pk_vorlauf/temp", 		"readTopic": "ebus/st_pk_vorlauf/temp/get" },
					{ "itemId": "ST_PK_Ruecklauftemperatur",	"stateTopic": "ebus/st_pk_ruecklauf/temp", 		"readTopic": "ebus/st_pk_ruecklauf/temp/get" },
					{ "itemId": "ST_PK_Pumpenleistung", 		"stateTopic": "ebus/st_pk_pumpe_status/wert", 	"readTopic": "ebus/st_pk_pumpe_status/wert/get" },
					{ "itemId": "ST_PK_Pumpenlaufzeit",			"stateTopic": "ebus/st_pk_pumpe_laufzeit/wert",	"readTopic": "ebus/st_pk_pumpe_laufzeit/wert/get" },
					{ "itemId": "ST_PK_Volumenstrom",			"stateTopic": "ebus/st_pk_volumenstrom/wert",	"readTopic": "ebus/st_pk_volumenstrom/wert/get" },

					{ "itemId": "Herzschlag_ebusd", "stateTopic": "ebus/global/signal" },
				]
			}
		},

		{
			"id": "openhab",
			"numberAsString": {},
			"booleanAsString": { 
				"falseValue": "OFF", 
				"trueValue": "ON", 
				"unwritableFalseValue": "CLOSED", 
				"unwritableTrueValue": "OPEN" 
			},
			"voidAsString": { "value": "ON"},

			"mqtt":	{
				"clientIdPrefix": "weaver_openhab",
				"hostname": "192.168.25.9",
				"retainFlag": true,
				//"logMessages": true,
				"stateTopicPattern": "openhab/%ItemId%/state",
				"writeTopicPattern": "openhab/%ItemId%/write",
				"readTopicPattern": "openhab/%ItemId%/read"
			}
		},

		{
			"id": "sonos_api",

			// This link type supports the reading and writing of items via HTTP.
			"http": {
				// Enables logging for transfer initiation and completion. Optional, default is false. 
				//"logTransfers": true,

				// Enables the cURL verbose mode for transfers (CURLOPT_VERBOSE) and logs all provided
				// information. Optional, default is false. 
				//"verboseMode": true,

				"bindings": [
					{
						"itemId": "Haustuerklingel", 
						"url": "http://192.168.25.9:5005/k%C3%BCche/clip/doorbell.mp3/80",
						"responsePattern": "\"status\":\"success\""
					},
					{ 
						"itemId": "FSE_EG_Bad_Durchsage", 
						"url": "http://192.168.25.9:5005/k%C3%BCche/say/Bitte das Fenster im Erdgeschoss-Bad schliessen/de/80",
						"responsePattern": "\"status\":\"success\""
					},
					{ 
						"itemId": "FSE_WC_Durchsage", 
						"url": "http://192.168.25.9:5005/k%C3%BCche/say/Bitte das Fenster im WC schliessen/de/80",
						"responsePattern": "\"status\":\"success\""
					},
					{ 
						"itemId": "FSE_Meike_Durchsage", 
						"url": "http://192.168.25.9:5005/k%C3%BCche/say/Bitte das Fenster in Meikes Zimmer schliessen/de/80",
						"responsePattern": "\"status\":\"success\""
					},
					{ 
						"itemId": "FSE_Merle_Durchsage", 
						"url": "http://192.168.25.9:5005/k%C3%BCche/say/Bitte das Fenster in Merles Zimmer schliessen/de/80",
						"responsePattern": "\"status\":\"success\""
					},
					{ 
						"itemId": "FSE_Eltern_Durchsage", 
						"url": "http://192.168.25.9:5005/k%C3%BCche/say/Bitte das Fenster im Sclafzimmer schliessen/de/80",
						"responsePattern": "\"status\":\"success\""
					},
				]
			}
		},

		{
			"id": "tankerkönig",
			"numberAsString": {},

			"http": {
				//"logTransfers": true,
				//"verboseMode": true,
				"bindings": [
					{
						"itemId": "BP_Aral", 
						"url": "https://creativecommons.tankerkoenig.de/json/detail.php?id=3941a78b-ad6b-484f-b8ab-e4b118946856&apikey=4c421e9c-b446-87b3-5e60-41a758cda727",
						"responsePattern": ".*,\"e10\":([0-9]+.[0-9]+),.*"
					},
					{
						"itemId": "BP_Esso", 
						"url": "https://creativecommons.tankerkoenig.de/json/detail.php?id=e091da58-c4e9-4a78-a53e-b370e5b88668&apikey=4c421e9c-b446-87b3-5e60-41a758cda727",
						"responsePattern": ".*,\"e10\":([0-9]+.[0-9]+),.*"
					},
				]
			}
		},

		{
			"id": "fritzbox_callmonitor",

			"tcp": {
				// IP address or name of remote system to which the connection will be established. 
				"hostname": "192.168.25.4",

				// IP port on the remote system to which the TCP connection will be established.
				"port": 1012,

				// Regular expression (POSIX extended) for splitting the received byte stream into messages. For 
				// parsing and evaluation of the expression std::regex is used internally. Potential marked 
				// subexpressions are ignored.
				"msgPattern": "[^\r\n]*\r\n",

				// Enables logging of the received byte stream. Optional, default is false.
				"logRawData": true,

				// Indicates whether the received byte stream has to be logged in hexadecimal representation.
				// Optional, default is false.
				//"logRawDataInHex": true,

				// Mapping of received message to one or more items.
				"bindings": [
					{ "itemId": "Telefonanruf_Eingehend", "pattern": ".*;RING;0;([0-9]*);[0-9]*;.*" },
					{ "itemId": "Telefonanruf_Ausgehend", "pattern": ".*;CALL;1;4;[0-9]*;([0-9]*);.*" },
					{ "itemId": "Telefonanruf_Beginnt", "pattern": ".*;CONNECT;.*" },
					{ "itemId": "Telefonanruf_Endet", "pattern": ".*;DISCONNECT;.*" }, 
				]
			}
		},

		{
			"id": "fritzbox_tr064",
			"booleanAsString": { "falseValue": "0", "trueValue": "1" },

			"http": {
				//"logTransfers": true,
				//"verboseMode": true,
				"bindings": [
					{
						"itemId": "Fernseher_Wohnen_2", 
						"url": "http://192.168.25.4:49000/upnp/control/hosts",
						"headers": [ 
							"Content-type: text/xml;charset=\"utf-8\"", 
							"SoapAction: urn:dslforum-org:service:Hosts:1#GetSpecificHostEntry" 
						],
						"request": "<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" ><s:Body><u:GetSpecificHostEntry xmlns:u=\"urn:dslforum-org:service:Hosts:1\"><NewMACAddress>18:8E:D5:0C:90:61</NewMACAddress></u:GetSpecificHostEntry></s:Body></s:Envelope>\n",
						"responsePattern": ".*<NewActive>([0-1])</NewActive>.*"
					},
					{
						"itemId": "Fernseher_Hobbyraum_2", 
						"url": "http://192.168.25.4:49000/upnp/control/hosts",
						"headers": [ 
							"Content-type: text/xml;charset=\"utf-8\"", 
							"SoapAction: urn:dslforum-org:service:Hosts:1#GetSpecificHostEntry" 
						],
						"request": "<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" ><s:Body><u:GetSpecificHostEntry xmlns:u=\"urn:dslforum-org:service:Hosts:1\"><NewMACAddress>84:A4:66:C1:7F:49</NewMACAddress></u:GetSpecificHostEntry></s:Body></s:Envelope>\n",
						"responsePattern": ".*<NewActive>([0-1])</NewActive>.*"
					},
					{
						"itemId": "Handy_Peter", 
						"url": "http://192.168.25.4:49000/upnp/control/hosts",
						"headers": [ 
							"Content-type: text/xml;charset=\"utf-8\"", 
							"SoapAction: urn:dslforum-org:service:Hosts:1#GetSpecificHostEntry" 
						],
						"request": "<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" ><s:Body><u:GetSpecificHostEntry xmlns:u=\"urn:dslforum-org:service:Hosts:1\"><NewMACAddress>40:4E:36:85:DC:49</NewMACAddress></u:GetSpecificHostEntry></s:Body></s:Envelope>\n",
						"responsePattern": ".*<NewActive>([0-1])</NewActive>.*"
					},
					{
						"itemId": "Handy_Beate", 
						"url": "http://192.168.25.4:49000/upnp/control/hosts",
						"headers": [ 
							"Content-type: text/xml;charset=\"utf-8\"", 
							"SoapAction: urn:dslforum-org:service:Hosts:1#GetSpecificHostEntry" 
						],
						"request": "<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" ><s:Body><u:GetSpecificHostEntry xmlns:u=\"urn:dslforum-org:service:Hosts:1\"><NewMACAddress>DC:0B:34:86:AC:E4</NewMACAddress></u:GetSpecificHostEntry></s:Body></s:Envelope>\n",
						"responsePattern": ".*<NewActive>([0-1])</NewActive>.*"
					},
					{
						"itemId": "Handy_Meike", 
						"url": "http://192.168.25.4:49000/upnp/control/hosts",
						"headers": [ 
							"Content-type: text/xml;charset=\"utf-8\"", 
							"SoapAction: urn:dslforum-org:service:Hosts:1#GetSpecificHostEntry" 
						],
						"request": "<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" ><s:Body><u:GetSpecificHostEntry xmlns:u=\"urn:dslforum-org:service:Hosts:1\"><NewMACAddress>18:19:D6:DE:C9:AF</NewMACAddress></u:GetSpecificHostEntry></s:Body></s:Envelope>\n",
						"responsePattern": ".*<NewActive>([0-1])</NewActive>.*"
					},
					{
						"itemId": "Handy_Merle", 
						"url": "http://192.168.25.4:49000/upnp/control/hosts",
						"headers": [ 
							"Content-type: text/xml;charset=\"utf-8\"", 
							"SoapAction: urn:dslforum-org:service:Hosts:1#GetSpecificHostEntry" 
						],
						"request": "<?xml version=\"1.0\" encoding=\"utf-8\"?><s:Envelope s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" ><s:Body><u:GetSpecificHostEntry xmlns:u=\"urn:dslforum-org:service:Hosts:1\"><NewMACAddress>18:65:90:88:4B:63</NewMACAddress></u:GetSpecificHostEntry></s:Body></s:Envelope>\n",
						"responsePattern": ".*<NewActive>([0-1])</NewActive>.*"
					},
				]
			}
		},

		{
			"id": "generator",
			"voidAsString": { "value": "" },

			// This link type supports the regular triggering of events.
			"generator": {

				// Associates event scheduling with items.
				"bindings": [
					//{
						// Id of item for which the event will be produced.
						//"itemId": "weaver_herzschlag", 

						// Kind of event which will be produced. Possible values are STATE_IND, WRITE_REQ and 
						// READ_REQ. For STATE_IND the link needs to be the owner link whereas for WRITE_REQ 
						// and READ_REQ the link must not be owner link. 
						//"eventType": "STATE_IND", 

						// Value which will be assigned to STATE_IND and WRITE_REQ events. 
						//"value": "42",

						// Frequency in which the events will be generated. That is, the time duration in seconds 
						// between two successive events. 
						//"interval": 30,

						// Arriving READ_REQ events for STATE_IND schedules also trigger the STATE_IND event.
					//},

					{ "itemId": "Herzschlag_weaver", "eventType": "STATE_IND", "value": "", "interval": 60 },
				]
			}
		},

		{
			"id": "storage",

			// This link type supports persistency for the items it owns.
			"storage": {
				// File in which the item values are stored.
				"fileName": "../weaver_states.json"
			}
		}
	]
}